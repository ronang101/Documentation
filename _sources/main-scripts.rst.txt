.. _main-scripts-label:

main-scripts
============

This section of the documentation elaborates on the JavaScript files within the `main-scripts` directory. These scripts are crucial for the dynamic operation of the platform, including API communication, DOM manipulations, and user interaction handling.

.. _api-label:

**api.js**
----------

The `api.js` script serves as the interface for server-side API requests. It encapsulates the following functionality:

- Fetching recommendations based on seen user IDs and interactions.
- Recording user interactions with a recommendation.
- Fetching matches and sending reports to the server.

Key Functions
-------------

.. function:: fetchRecommendations(seenUserIds, interactions)

   Initiates a POST request to the server to fetch new recommendations based on user interactions and previously seen user IDs. It returns a promise that resolves to the fetched data.

.. function:: checkRecommendations()

   Initiates a GET request to the server to fetch stored recommendations in order to avoid recaculaitons. It returns a promise that resolves to the fetched data.

.. function:: recordInteraction(recommendationId, interactionType)

   Sends a POST request to the server to record a user interaction (like, dislike, superlike) with a recommendation. This function helps in updating the server about user preferences and choices.

.. function:: fetchMatches()

   Retrieves the current user's matches from the server through a GET request. It is used to populate the user interface with matches for further interaction.

.. function:: report(formData)

   Submits a user report to the server. This function is called when a user reports inappropriate content, abuse, or other issues. It handles the form data and sends a POST request with the report details.

.. function:: reportMatch(formData)

   Similar to `report`, but specifically for reporting issues related to a particular match. This function takes form data and sends a report regarding a specific user match.

.. function:: removeMatch(id)

   Sends a request to the server to remove a specific match from the user's list. This function is used when a user decides to unmatch or remove a connection with another user.

Exposed Methods
---------------

The `API` module exposes the following methods, making them accessible to other scripts in the application:

.. method:: fetchRecommendations(seenUserIds, interactions) :no-index:
.. method:: recordInteraction(recommendationId, interactionType) :no-index:
.. method:: fetchMatches() :no-index:
.. method:: report(formData) :no-index:
.. method:: reportMatch(formData) :no-index:
.. method:: removeMatch(id) :no-index:

.. _dom-label:

**dom.js**
----------

`dom.js` manages the Document Object Model (DOM) related operations:

- Dynamically displaying user recommendations with detailed information.
- Handling image loading and errors, budget displays, and user interactions.
- Utilizing the Pikaday library for calendar elements.
- Displaying modals for mutual likes and reporting, with all the associated UI logic.

Key Functions
-------------

.. function:: displayRecommendation(rec)

   This function updates the DOM with the details of a user recommendation, this creates the recommendation card. It sets text content for various elements like name, age, city, and dynamically updates the user interface based on the recommendation data. It also manages the profile image, including loading and error handling, and updates budget limits with corresponding gauge graphics.

.. function:: showModal(recName)

   Displays a modal when there's a mutual match (like) between users. This function controls the display of the modal and includes logic for closing it through various UI elements.

.. function:: showReportModal()

   Sets up and manages the user interface for reporting other users. This includes form submission handling and displaying a thank-you modal upon submission.

Exposed Methods
---------------

The `DOM` module exposes the following methods, making them accessible to other scripts within the application:

.. method:: displayRecommendation(rec) :no-index:
.. method:: showModal(recName) :no-index:
.. method:: showReportModal() :no-index:

.. _matches-label:

**matches.js**
--------------

The `matches.js` script handles the display and interaction with matched user profiles:

- Fetching and displaying matched profiles using API calls.
- Setting up Pikaday calendars for each match to display available move-in dates.
- Constructing HTML for match cards and initializing UI elements like budget gauges and feature sections.
- Managing reports and match removals.

Key Functions
-------------

.. function:: displayMatches()

   Retrieves and displays the user's matches from the server. This function makes an API call to fetch the matches and then creates a match card for each user. It also sets up Pikaday calendars for each match and initializes various UI elements.

.. function:: createMatchCard(match, index)

   Constructs and returns the HTML content for a single match card. This includes the profile picture, bio, and other user information. It sets up budget gauges and initializes feature sections like About Me, Lifestyle, and Interests.

.. function:: initializePikadayForMatch(match, index)

   Initializes the Pikaday calendar for a specific match card. This function sets the calendar's maximum and minimum dates and customizes its appearance and behavior.

Event Listeners and UI Handling
-------------------------------

- The script listens for the 'DOMContentLoaded' event to initialize the display of matches and sets up the report modal functionality.

- Event listeners are added for various interactions within the match card, such as toggling between budget and calendar views, reporting matches, and removing matches.

- The script includes functions like `reportInitialize(match)` and `removeInitialize(match)` to handle reporting and removal of matches, respectively.

- Modals for contact information and reporting are managed, ensuring they are displayed and hidden appropriately based on user actions.

Exposed Methods
---------------

The `matches.js` script exposes certain methods to the global scope for interaction with other components of the application:

.. method:: displayMatches() :no-index:
.. method:: createMatchCard(match, index) :no-index:
.. method:: initializePikadayForMatch(match, index) :no-index:

.. _recommendations-label:

**recommendations.js**
----------------------

The `recommendations.js` script is the central script of the platform, it utilizes functions from other scripts and unifies all of them to create the main UI users will see. Its key functionalities include:

- Managing the state of user recommendations, tracking seen IDs and user interactions.
- Fetching new recommendations from the server as the user navigates through them.
- Creating recommendation cards which display all public information on a recommended user.
- Initializing the Pikaday calendar for viewing move-in dates.
- Recording user interactions such as likes, dislikes, and superlikes.
- Handling the UI transitions between budget and calendar views.
- Managing modals for reporting and matching notifications.

Key Functions
-------------

.. function:: initializeCalendar()

   Initializes the Pikaday calendar with a custom rendering function to highlight and disable dates. It sets the range of valid dates and binds the calendar to a specific DOM container.

.. function:: toggleBudgetView()

   Toggles the user interface to display the budget view, hiding the calendar and adjusting button states to reflect the current view.

.. function:: toggleCalendarView()

   Switches the user interface to display the calendar view, concealing the budget information and toggling button states accordingly.

.. function:: loadNextRecommendation()

   Loads and displays the next recommendation from the pre-fetched list. If the end of the list is reached, it triggers fetching new recommendations.

.. function:: fetchRecommendations() :no-index:

   Makes an API call to retrieve new recommendations based on previously seen user IDs and user interactions. Updates the list of recommendations and resets interaction tracking.

.. function:: fetchRecommendationsEarly()

   Fetches new recommendations without immediately displaying them, designed to pre-load recommendations for a smoother user experience.

.. function:: recordInteraction(recommendationId, recName, interactionType) :no-index:

   Records a user interaction (like, dislike, superlike) with a recommendation. It updates the local interaction state and sends the interaction to the server for processing.

.. function:: disableInteractionButtons()

   Disables interaction buttons (like, dislike, superlike) to prevent repeated interactions during data processing.

.. function:: enableInteractionButtons()

   Re-enables the interaction buttons after data processing is complete.

.. function:: toggleMenu() :no-index:

   Displays or hides the side menu in response to user interactions with the hamburger menu icon.

Event Listeners
---------------

.. method:: DOMContentLoaded() :no-index:

   Fetches the initial set of recommendations and sets up event listeners for the budget and calendar view toggle buttons, as well as the side menu.

Exposed Methods
---------------

The following methods are exposed by the `Main` module for use in other scripts:

.. method:: recordInteraction(recommendationId, recName, interactionType) :no-index:

   Allows other scripts to record interactions with recommendations.

.. method:: loadNextRecommendation() :no-index:

   Enables other scripts to trigger the loading of the next recommendation in the list.

Private Variables
-----------------

.. data:: currentRecIndex

   Tracks the index of the currently displayed recommendation.

.. data:: recommendations

   An array holding the currently loaded set of recommendations.

.. data:: seenUserIds

   An array of user IDs that have already been displayed to prevent repeat recommendations.

.. data:: interactions

   An array of recorded interactions that the user has made with recommendations.

HTML Integration
----------------

The scripts interact with various HTML elements defined in `recommendations.html` and `matches.html`. These elements include buttons, containers, and modals, which are manipulated based on user actions and server responses.

.. code-block:: html

   <!-- Sample of script inclusion in HTML for recommendations -->
   <script src="../static/scripts/main-scripts/recommendations.js"></script>

For more detailed instructions on usage and customization, refer to the usage and comments within each script and the associated HTML files for context.

See Also
--------

- :ref:`Frontend-Backend Interaction <frontend-backend-interaction-label>` for how these scripts integrate with the backend.
- :ref:`Modules Overview <modules-overview-label>` for an overview of related modules.
